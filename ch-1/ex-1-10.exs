#  Ackermann's function
a = fn (a, x, y) ->
  cond do
    y == 0 -> 0
    x == 0 -> 2 * y
    y == 1 -> 2
    true -> a.(
      a,
      x - 1,
      a.(a, x, y - 1)
    )
  end
end

IO.inspect a.(a, 1, 10)
# a.(1, 10)
# a.(0, a.(1, 9))
# a.(0, a.(0, a.(1, 8)))
# a.(0, a.(0, a.(0, a.(1, 7))))
# a.(0, a.(0, a.(0, a.(0, a.(1, 6)))))
# a.(0, a.(0, a.(0, a.(0, a.(0, a.(1, 5))))))))
# a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(1, 4)))))))))
# a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(1, 3))))))))))
# a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(1, 2))))))))))
# a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(1, 1))))))))))
# a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, 2)))))))))
# a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, 4))))))))
# a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, 8)))))))
# a.(0, a.(0, a.(0, a.(0, a.(0, a.(0, 16))))))
# a.(0, a.(0, a.(0, a.(0, a.(0, 32)))))
# a.(0, a.(0, a.(0, a.(0, 64))))
# a.(0, a.(0, a.(0, 128)))
# a.(0, a.(0, 256))
# a.(0, 512)
# 1024
IO.inspect a.(a, 2, 4)
IO.inspect a.(a, 3, 3)

f = fn (n) -> a.(a, 0, n) end # 2n
g = fn (n) -> a.(a, 1, n) end # 2 ^ n
h = fn (n) -> a.(a, 2, n) end # 2 ^ 2 ^ ... (n - 1 times)

IO.inspect f.(4)
IO.inspect g.(4)
IO.inspect h.(4)
